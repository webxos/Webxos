<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#0f0">
    <meta name="description" content="Watchdog AI tests users carbon emissions data">
    <meta name="keywords" content="sustainable software, green coding, eco web design, carbon testing, energy consumption studies, browser energy efficiency, eco-friendly web, green tech, carbon footprint, web performance, sustainable web development">
    <meta name="author" content="WebXOS">
    <meta name="robots" content="index, follow">
    <meta name="application-name" content="Watchdog AI BETA">
    <meta property="og:title" content="Watchdog AI BETA: Sustainable Browser Energy Testing">
    <meta property="og:description" content="Measure your browser's energy efficiency and carbon footprint with Watchdog AI BETA. Optimize for green coding and eco web design.">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://watchdog-ai-beta.webxos.com">
    <meta property="og:image" content="https://watchdog-ai-beta.webxos.com/icon.png">
    <meta property="og:site_name" content="Watchdog AI BETA">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Watchdog AI BETA: Green Coding & Carbon Testing">
    <meta name="twitter:description" content="Test browser energy consumption and reduce your carbon footprint with Watchdog AI BETA. Built for sustainable software and eco web design.">
    <meta name="twitter:image" content="https://watchdog-ai-beta.webxos.com/icon.png">
    <meta name="twitter:site" content="@WebXOS">
    <title>Watchdog AI BETA: Sustainable Software & Green Coding</title>
    <link rel="icon" href="icon.png">
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: monospace, sans-serif;
        }

        html, body {
            height: 100vh;
            overflow: hidden;
            background: #000;
            color: #0f0;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: background 0.3s, box-shadow 0.3s;
        }

        body.glow {
            background: rgba(255, 0, 0, 0.1);
            box-shadow: 0 0 20px #ff0000, 0 0 40px #ff0000 inset;
        }

        #console {
            width: 90%;
            max-width: 900px;
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid #0f0;
            padding: 0.8rem;
            flex: 1;
            max-height: calc(100vh - 140px);
            overflow-y: auto;
            margin: 0.5rem 0;
            border-radius: 5px;
            font-size: 0.85rem;
            -webkit-overflow-scrolling: touch;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

        #console.active-byte {
            border-color: #ff0000;
            box-shadow: 0 0 10px #ff0000;
        }

        #console p {
            margin: 0.3rem 0;
        }

        #console .command {
            font-family: 'Orbitron', monospace;
            font-weight: 700;
            text-shadow: 0 0 3px #0f0;
        }

        .button-group {
            display: flex;
            gap: 0.5rem;
            margin: 0.5rem 0;
            padding: 0.5rem;
            flex-wrap: wrap;
            justify-content: center;
            width: 90%;
            max-width: 900px;
        }

        button {
            background: #0f0;
            color: #000;
            border: none;
            padding: 0.5rem 1rem;
            font-size: 0.85rem;
            cursor: pointer;
            border-radius: 3px;
            min-width: 80px;
            text-align: center;
            touch-action: manipulation;
            transition: background 0.3s, box-shadow 0.3s;
        }

        button:hover, button:focus {
            background: #0c0;
            outline: 2px solid #0f0;
        }

        button.active-byte {
            background: #ff0000;
            box-shadow: 0 0 10px #ff0000;
        }

        button:disabled {
            background: #666;
            cursor: not-allowed;
        }

        footer {
            width: 100%;
            padding: 0.5rem;
            font-size: 10pt;
            text-align: center;
            color: #0f0;
            background: rgba(0, 0, 0, 0.8);
            line-height: 1.2;
        }

        @media (max-width: 600px) {
            h1 { font-size: 1.2rem; margin: 0.6rem 0; }
            #console { 
                font-size: 0.8rem; 
                padding: 0.6rem; 
                max-height: calc(100vh - 120px); 
            }
            button { 
                padding: 0.4rem 0.8rem; 
                font-size: 0.8rem; 
                min-width: 70px; 
            }
            footer { padding: 0.4rem; }
        }

        @media (max-width: 400px) {
            .button-group { flex-direction: column; align-items: center; }
            button { width: 100%; max-width: 180px; }
            #console { max-height: calc(100vh - 110px); }
        }
    </style>
</head>
<body>
    <h1 role="heading" aria-level="1">Watchdog AI BETA</h1>
    <div id="console" role="log" aria-live="polite">
        <p>Watchdog AI BETA User Guide: Bark: Run tests & report | Byte: Toggle connection monitor | Reset: Clear console</p>
    </div>
    <div class="button-group">
        <button id="bark-btn" aria-label="Run performance tests and generate report">Bark</button>
        <button id="byte-btn" aria-label="Toggle connection monitor">Byte</button>
        <button id="reset-btn" aria-label="Clear console output">Reset</button>
    </div>
    <footer>
        Â© 2025 WebXOS - Watchdog AI BETA<br>
        Bark: Run tests & report | Byte: Toggle connection monitor | Reset: Clear console
    </footer>

    <script>
        function debugLog(message) {
            console.log(`[DEBUG] ${message}`);
        }

        const consoleDiv = document.getElementById('console');
        let logQueue = [];
        function log(message, isCommand = false) {
            const formattedMessage = isCommand 
                ? `<span class="command">${message}</span>`
                : message;
            logQueue.push(`[${new Date().toLocaleTimeString()}] ${formattedMessage}`);
            if (logQueue.length > 50) logQueue.shift();
            throttleConsoleUpdate();
        }

        const throttleConsoleUpdate = (() => {
            let timeout;
            return () => {
                if (!timeout) {
                    timeout = setTimeout(() => {
                        consoleDiv.innerHTML = logQueue.map(msg => `<p>${msg}</p>`).join('');
                        consoleDiv.scrollTop = consoleDiv.scrollHeight;
                        timeout = null;
                    }, 100);
                }
            };
        })();

        function triggerGlow() {
            document.body.classList.add('glow');
            setTimeout(() => document.body.classList.remove('glow'), 1000);
        }

        function flashRedGlow() {
            consoleDiv.classList.add('active-byte');
            setTimeout(() => consoleDiv.classList.remove('active-byte'), 500);
            setTimeout(() => {
                consoleDiv.classList.add('active-byte');
                setTimeout(() => consoleDiv.classList.remove('active-byte'), 500);
            }, 1000);
        }

        function resetConsole() {
            debugLog('Reset button clicked');
            try {
                logQueue = ['Watchdog AI BETA User Guide: Bark: Run tests & report | Byte: Toggle connection monitor | Reset: Clear console'];
                throttleConsoleUpdate();
                log('Console cleared.', true);
            } catch (err) {
                log(`Reset Error: ${err.message}`, true);
                debugLog(`Reset Error: ${err.stack}`);
            }
        }

        function calculateMetrics(results) {
            const totalScore = results.reduce((sum, result) => sum + result.score, 0);
            const maxScore = results.length * 10;
            const normalizedScore = Math.round((totalScore / maxScore) * 100);
            const estimatedWatts = 40 + (100 - normalizedScore) * 2;
            const carbonFootprint = (estimatedWatts * 0.000531).toFixed(2);
            return { totalScore, maxScore, normalizedScore, estimatedWatts, carbonFootprint };
        }

        class AdvancedAgent {
            constructor(name, tests) {
                this.name = name;
                this.tests = tests;
                this.results = [];
                this.isMobile = /Mobi|Android/i.test(navigator.userAgent);
                this.selectedTests = null;
                this.baselineFactor = 1;
            }

            async calibrate() {
                const start = performance.now();
                let sum = 0;
                for (let i = 0; i < 10000; i++) sum += Math.sqrt(i);
                const baselineTime = performance.now() - start;
                this.baselineFactor = Math.min(2, Math.max(0.5, baselineTime / 10));
                debugLog(`Baseline factor: ${this.baselineFactor}`);
            }

            selectTests() {
                if (this.selectedTests) return this.selectedTests;
                const supportedTests = this.tests.filter(test => {
                    if (test.requires && !test.requires()) return false;
                    if (this.isMobile && test.heavy) return false;
                    return true;
                });

                const prioritized = [];
                const categories = new Set();
                for (const test of supportedTests) {
                    if (prioritized.length >= 8) break;
                    if (!categories.has(test.category)) {
                        prioritized.push(test);
                        categories.add(test.category);
                    }
                }
                for (const test of supportedTests) {
                    if (prioritized.length >= 8) break;
                    if (!prioritized.includes(test)) prioritized.push(test);
                }
                this.selectedTests = prioritized.slice(0, Math.max(4, prioritized.length));
                return this.selectedTests;
            }

            async runTests() {
                await this.calibrate();
                this.results = [];
                const selectedTests = this.selectTests();
                log(`Running ${selectedTests.length} energy tests...`, true);

                for (const test of selectedTests) {
                    const iterations = this.isMobile ? test.iterations * 0.5 : test.iterations;
                    const result = await test.fn(iterations, this.baselineFactor);
                    this.results.push({ name: test.name, ...result });
                    log(`${test.name}: ${result.score}/10 (${result.details})`);
                }
                return this.results;
            }
        }

        const tests = [
            {
                name: 'JS Performance',
                category: 'cpu',
                iterations: 200000,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.now();
                    let sum = 0;
                    for (let i = 0; i < iterations; i++) sum += Math.sqrt(i);
                    const time = performance.now() - start;
                    const threshold1 = 20 * baselineFactor;
                    const threshold2 = 50 * baselineFactor;
                    return {
                        score: time < threshold1 ? 9 : time < threshold2 ? 7 : 5,
                        details: `Completed in ${time.toFixed(2)}ms`,
                        metric: time
                    };
                }
            },
            {
                name: 'CPU Efficiency',
                category: 'cpu',
                iterations: 500000,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.now();
                    let load = 0;
                    for (let i = 0; i < iterations; i++) load += Math.random();
                    const time = performance.now() - start;
                    const threshold1 = 40 * baselineFactor;
                    const threshold2 = 80 * baselineFactor;
                    return {
                        score: time < threshold1 ? 8 : time < threshold2 ? 6 : 4,
                        details: `Stress test in ${time.toFixed(2)}ms`,
                        metric: time
                    };
                }
            },
            {
                name: 'Memory Usage',
                category: 'memory',
                iterations: 200000,
                requires: () => !!performance.memory,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.memory.usedJSHeapSize;
                    const array = new Array(iterations).fill(0);
                    const end = performance.memory.usedJSHeapSize;
                    const memUsage = (end - start) / 1024 / 1024;
                    const threshold1 = 2 * baselineFactor;
                    const threshold2 = 8 * baselineFactor;
                    return {
                        score: memUsage < threshold1 ? 8 : memUsage < threshold2 ? 6 : 4,
                        details: `${memUsage.toFixed(2)}MB used`,
                        metric: memUsage
                    };
                }
            },
            {
                name: 'Display Power',
                category: 'display',
                iterations: 1,
                fn: async (_, baselineFactor) => {
                    const brightness = window.matchMedia('(prefers-contrast: high)').matches ? 4 : 8;
                    return {
                        score: brightness,
                        details: brightness === 8 ? 'Low brightness' : 'High brightness',
                        metric: brightness
                    };
                }
            },
            {
                name: 'Battery Impact',
                category: 'battery',
                iterations: 1,
                requires: () => !!navigator.getBattery,
                fn: async (_, baselineFactor) => {
                    const battery = await navigator.getBattery();
                    const level = battery.level;
                    const score = level > 0.5 ? 8 : level > 0.2 ? 6 : 4;
                    return {
                        score,
                        details: `Level at ${(level * 100).toFixed(0)}%`,
                        metric: level
                    };
                }
            },
            {
                name: 'Rendering Performance',
                category: 'rendering',
                iterations: 100,
                heavy: true,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.now();
                    const div = document.createElement('div');
                    for (let i = 0; i < iterations; i++) {
                        div.style.background = `#${Math.random().toString(16).slice(2, 8)}`;
                        document.body.appendChild(div);
                        document.body.removeChild(div);
                    }
                    const time = performance.now() - start;
                    const threshold1 = 50 * baselineFactor;
                    const threshold2 = 100 * baselineFactor;
                    return {
                        score: time < threshold1 ? 9 : time < threshold2 ? 7 : 5,
                        details: `Rendering in ${time.toFixed(2)}ms`,
                        metric: time
                    };
                }
            },
            {
                name: 'DOM Manipulation',
                category: 'dom',
                iterations: 1000,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.now();
                    const div = document.createElement('div');
                    for (let i = 0; i < iterations; i++) {
                        div.textContent = `Test ${i}`;
                        document.body.appendChild(div);
                        document.body.removeChild(div);
                    }
                    const time = performance.now() - start;
                    const threshold1 = 30 * baselineFactor;
                    const threshold2 = 60 * baselineFactor;
                    return {
                        score: time < threshold1 ? 9 : time < threshold2 ? 7 : 5,
                        details: `DOM updates in ${time.toFixed(2)}ms`,
                        metric: time
                    };
                }
            },
            {
                name: 'Event Loop Latency',
                category: 'eventloop',
                iterations: 100,
                fn: async (iterations, baselineFactor) => {
                    const start = performance.now();
                    let count = 0;
                    const tick = () => {
                        if (count++ < iterations) setTimeout(tick, 0);
                    };
                    tick();
                    await new Promise(resolve => setTimeout(resolve, iterations * 2));
                    const time = performance.now() - start;
                    const threshold1 = 200 * baselineFactor;
                    const threshold2 = 400 * baselineFactor;
                    return {
                        score: time < threshold1 ? 9 : time < threshold2 ? 7 : 5,
                        details: `Latency in ${time.toFixed(2)}ms`,
                        metric: time
                    };
                }
            }
        ];

        const enhancementTips = {
            'JS Performance': (result, isMobile) => {
                const time = parseFloat(result.details);
                const isSevere = time > 50;
                return {
                    tips: isSevere 
                        ? '- Close all unnecessary tabs and applications.\n- Update your browser to the latest version.\n'
                        : '- Close unused tabs.\n- Disable heavy browser extensions.\n',
                    message: isMobile
                        ? `High CPU usage detected (${time.toFixed(2)}ms). ${isSevere ? 'Consider closing apps or restarting your device.' : 'Try closing background apps to improve performance.'}`
                        : `JS Performance is slow (${time.toFixed(2)}ms). ${isSevere ? 'Close resource-heavy applications or update your system.' : 'Reduce open tabs to boost efficiency.'}`
                };
            },
            'CPU Efficiency': (result, isMobile) => {
                const time = parseFloat(result.details);
                const isSevere = time > 80;
                return {
                    tips: isSevere 
                        ? '- Shut down background processes.\n- Check for system updates.\n'
                        : '- Limit background apps.\n- Enable power-saving mode.\n',
                    message: isMobile
                        ? `CPU stress test took ${time.toFixed(2)}ms. ${isSevere ? 'Restart your device to free resources.' : 'Close unused apps to save energy.'}`
                        : `CPU efficiency is low (${time.toFixed(2)}ms). ${isSevere ? 'Close heavy applications or update drivers.' : 'Enable power-saving settings.'}`
                };
            },
            'Memory Usage': (result, isMobile) => {
                const memUsage = parseFloat(result.details);
                const isSevere = memUsage > 8;
                return {
                    tips: isSevere 
                        ? '- Close memory-intensive apps.\n- Clear browser cache.\n'
                        : '- Disable unused extensions.\n- Free up RAM.\n',
                    message: isMobile
                        ? `Memory usage high (${memUsage.toFixed(2)}MB). ${isSevere ? 'Close apps or restart your device.' : 'Disable heavy extensions to reduce memory load.'}`
                        : `Memory usage at ${memUsage.toFixed(2)}MB. ${isSevere ? 'Close other applications or restart.' : 'Clear cache to optimize memory.'}`
                };
            },
            'Display Power': (result, isMobile) => {
                const brightness = result.metric;
                return {
                    tips: brightness === 4 
                        ? '- Reduce screen brightness.\n- Enable auto-brightness.\n'
                        : '- Maintain low brightness.\n- Use dark mode.\n',
                    message: isMobile
                        ? `Display power is ${brightness === 4 ? 'high' : 'optimized'}. ${brightness === 4 ? 'Lower brightness to save battery.' : 'Keep low brightness for efficiency.'}`
                        : `Display power is ${brightness === 4 ? 'high' : 'optimized'}. ${brightness === 4 ? 'Reduce brightness or enable dark mode.' : 'Continue using dark mode.'}`
                };
            },
            'Battery Impact': (result, isMobile) => {
                const level = result.metric * 100;
                const isSevere = level < 20;
                return {
                    tips: isSevere 
                        ? '- Charge device soon.\n- Use a high-efficiency charger.\n'
                        : '- Charge during off-peak hours.\n- Avoid overcharging.\n',
                    message: isMobile
                        ? `Battery at ${level.toFixed(0)}%. ${isSevere ? 'Charge now to avoid shutdown.' : 'Charge later to optimize battery health.'}`
                        : `Battery level at ${level.toFixed(0)}%. ${isSevere ? 'Connect to a charger soon.' : 'Charge during off-peak times.'}`
                };
            },
            'Rendering Performance': (result, isMobile) => {
                const time = parseFloat(result.details);
                const isSevere = time > 100;
                return {
                    tips: isSevere 
                        ? '- Disable GPU-heavy extensions.\n- Update graphics drivers.\n'
                        : '- Simplify CSS animations.\n- Reduce visual effects.\n',
                    message: isMobile
                        ? `Rendering took ${time.toFixed(2)}ms. ${isSevere ? 'Disable heavy themes or apps.' : 'Reduce animations to save power.'}`
                        : `Rendering performance low (${time.toFixed(2)}ms). ${isSevere ? 'Update GPU drivers or disable effects.' : 'Simplify webpage styles.'}`
                };
            },
            'DOM Manipulation': (result, isMobile) => {
                const time = parseFloat(result.details);
                const isSevere = time > 60;
                return {
                    tips: isSevere 
                        ? '- Minimize JavaScript frameworks.\n- Optimize DOM updates.\n'
                        : '- Reduce DOM changes.\n- Use lightweight scripts.\n',
                    message: isMobile
                        ? `DOM updates took ${time.toFixed(2)}ms. ${isSevere ? 'Limit active scripts or apps.' : 'Optimize scripts for better performance.'}`
                        : `DOM manipulation slow (${time.toFixed(2)}ms). ${isSevere ? 'Refactor heavy scripts.' : 'Reduce DOM operations.'}`
                };
            },
            'Event Loop Latency': (result, isMobile) => {
                const time = parseFloat(result.details);
                const isSevere = time > 400;
                return {
                    tips: isSevere 
                        ? '- Stop background scripts.\n- Check for conflicting extensions.\n'
                        : '- Optimize event handlers.\n- Limit timers.\n',
                    message: isMobile
                        ? `Event loop latency at ${time.toFixed(2)}ms. ${isSevere ? 'Disable heavy apps or scripts.' : 'Optimize timers for smoother performance.'}`
                        : `Event loop latency high (${time.toFixed(2)}ms). ${isSevere ? 'Remove conflicting extensions.' : 'Streamline event listeners.'}`
                };
            }
        };

        let lastTestResults = null;
        let byteActive = false;
        let latencyHistory = [];
        let connectionInterval = null;

        async function runLatencyTest() {
            const start = performance.now();
            await new Promise(resolve => setTimeout(resolve, 10)); // Simulate lightweight request
            const latency = performance.now() - start;
            latencyHistory.push(latency);
            if (latencyHistory.length > 20) latencyHistory.shift();

            const avgLatency = latencyHistory.reduce((sum, val) => sum + val, 0) / latencyHistory.length;
            const deviation = Math.abs(latency - avgLatency);
            if (deviation > avgLatency * 1.5 && latencyHistory.length > 5) {
                log('Warning: Potential data spike detected.', true);
                flashRedGlow();
            }
            return latency;
        }

        async function secureConnection() {
            // Simulate lightweight data lock (e.g., throttling, basic encryption)
            debugLog('Securing connection with lightweight measures');
            await new Promise(resolve => setTimeout(resolve, 50)); // Simulate low-resource security check
            log('Connection secured with data lock.', true);
        }

        async function sendPacket() {
            try {
                const response = await fetch('https://watchdog-ai-beta.webxos.com/ping', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ timestamp: Date.now() })
                });
                if (response.ok) {
                    const latency = await runLatencyTest();
                    log(`Packet sent, latency: ${latency.toFixed(2)}ms`, true);
                } else {
                    log('Packet send failed.', true);
                }
            } catch (err) {
                log(`Packet Error: ${err.message}`, true);
            }
        }

        function toggleByte() {
            byteActive = !byteActive;
            const byteBtn = document.getElementById('byte-btn');
            const consoleDiv = document.getElementById('console');
            byteBtn.classList.toggle('active-byte', byteActive);
            consoleDiv.classList.toggle('active-byte', byteActive);
            log(byteActive ? 'Byte: Connection monitor activated.' : 'Byte: Connection monitor deactivated.', true);

            if (byteActive) {
                secureConnection();
                sendPacket();
                connectionInterval = setInterval(async () => {
                    await sendPacket();
                    const latency = await runLatencyTest();
                    const isConnected = latency < 1000; // Arbitrary threshold
                    if (!isConnected) {
                        log('Warning: Connection to user lost.', true);
                        flashRedGlow();
                    }
                }, 5000);
            } else {
                clearInterval(connectionInterval);
                log('Byte: Connection monitoring stopped.', true);
            }
        }

        async function bark() {
            debugLog('Bark button clicked');
            triggerGlow();
            try {
                const barkBtn = document.getElementById('bark-btn');
                barkBtn.disabled = true;
                log('Initializing advanced energy profiling...', true);

                const agent = new AdvancedAgent('Watchdog', tests);
                const results = await agent.runTests();
                const metrics = calculateMetrics(results);

                log('Final Results:', true);
                log(`Eco Score: ${metrics.normalizedScore}/100`);
                log(`Carbon Footprint: ${metrics.carbonFootprint}kg CO2/h`);
                log('Description: Watchdog AI BETA dynamically tests browser energy efficiency.');

                const { isMobile } = agent;
                let report = `Watchdog AI BETA Energy Report\n\n`;
                report += 'Description: Watchdog AI BETA dynamically tests browser energy efficiency.\n\n';
                report += 'Scores (0-10):\n';
                results.forEach(result => {
                    report += `${result.name}: ${result.score}/10 (${result.details})\n`;
                });

                const worstTest = results.reduce((worst, result) => {
                    if (result.score < worst.score) return result;
                    if (result.score === worst.score) {
                        const priority = { cpu: 1, memory: 2, rendering: 3, dom: 4, eventloop: 5, battery: 6, display: 7 };
                        return priority[result.category] < priority[worst.category] ? result : worst;
                    }
                    return worst;
                }, results[0]);

                const tip = enhancementTips[worstTest.name](worstTest, isMobile);

                report += `\nEco Score: ${metrics.normalizedScore}/100\n`;
                report += `Carbon Footprint: ${metrics.carbonFootprint}kg CO2/h\n`;
                report += `\nWorst: ${worstTest.name} (${worstTest.score}/10)\n`;
                report += 'Next Steps:\n';
                report += tip.tips;
                report += `\nEnergy Enhancement Tip:\n${tip.message}\n`;

                log(tip.message, true);

                if (navigator.clipboard) {
                    navigator.clipboard.writeText(report).then(() => log('Report copied', true)).catch(err => log(`Copy Error: ${err.message}`, true));
                } else {
                    const textarea = document.createElement('textarea');
                    textarea.value = report;
                    document.body.appendChild(textarea);
                    textarea.select();
                    try {
                        document.execCommand('copy');
                        log('Report copied (fallback)', true);
                    } catch (err) {
                        log(`Copy Error: ${err.message}`, true);
                    }
                    document.body.removeChamita (textarea);
                }

                lastTestResults = null;
                log('Data destroyed.', true);
                barkBtn.disabled = false;
            } catch (err) {
                log(`Bark Error: ${err.message}`, true);
                debugLog(`Bark Error: ${err.stack}`);
                barkBtn.disabled = false;
            }
        }

        const debounce = (func, wait) => {
            let timeout;
            return (...args) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        };

        document.getElementById('bark-btn').addEventListener('click', debounce(() => {
            debugLog('Bark button clicked via event listener');
            bark();
        }, 200));
        document.getElementById('byte-btn').addEventListener('click', debounce(() => {
            debugLog('Byte button clicked via event listener');
            toggleByte();
        }, 200));
        document.getElementById('reset-btn').addEventListener('click', debounce(() => {
            debugLog('Reset button clicked via event listener');
            resetConsole();
        }, 200));

        document.addEventListener('keydown', e => {
            debugLog(`Key pressed: ${e.key}`);
            if (e.key === 'Enter' || e.key === ' ') bark();
            else if (e.key === 'b' || e.key === 'B') toggleByte();
            else if (e.key === 'r' || e.key === 'R') resetConsole();
        });

        log('Watchdog AI BETA User Guide: Bark: Run tests & report | Byte: Toggle connection monitor | Reset: Clear console', true);
    </script>
</body>
</html>
