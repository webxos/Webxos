<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trios by webxos</title>
    <style>
        body { background: #000; color: #0f0; font-family: 'IBM Plex Mono', monospace; margin: 0; padding: 10px; height: 100vh; overflow: hidden; }
        h1 { font-size: 1.2em; text-align: center; margin: 5px 0; text-shadow: 0 0 5px #0f0; }
        .console-container { flex: 1; display: flex; flex-direction: column; gap: 5px; overflow: hidden; }
        .console { flex: 1 1 calc(33.33% - 10px); background: #111; border: 2px solid #0f0; border-radius: 3px; padding: 5px; overflow-y: auto; font-size: 0.8em; max-height: 33vh; }
        .console-output { white-space: pre-wrap; min-height: 40px; outline: none; border: none; background: transparent; color: #0f0; width: 100%; }
        .preview { max-height: 2.4em; overflow: hidden; text-overflow: ellipsis; -webkit-line-clamp: 3; -webkit-box-orient: vertical; cursor: pointer; padding: 3px; background: #1a1a1a; border-bottom: 1px solid #0f0; font-size: 0.7em; }
        .input-area { display: flex; gap: 3px; margin-top: 5px; }
        input[type="text"] { flex: 1; background: #222; color: #0f0; border: 1px solid #0f0; padding: 3px; font-size: 0.7em; }
        button { background: #0f0; color: #000; border: none; padding: 3px 6px; cursor: pointer; font-size: 0.7em; }
        button:hover { background: #0c0; }
        .popup { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: #000; border: 2px solid #fff; padding: 10px; z-index: 1000; max-width: 90%; max-height: 80%; overflow-y: auto; }
        .fullscreen-popup { display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; height: 80%; background: #000; border: 2px solid #fff; padding: 10px; z-index: 1000; overflow-y: auto; }
        .fullscreen-console { height: calc(100% - 50px); padding: 5px; position: relative; }
        .fullscreen-console .console-output { min-height: 80%; outline: none; border: none; background: transparent; color: #0f0; width: 100%; }
        .highlighter-tool { position: absolute; top: 5px; right: 5px; background: #0f0; padding: 5px 10px; border-radius: 3px; cursor: pointer; font-size: 0.7em; }
        .highlighter-tool:hover { background: #0c0; }
        .highlight { background: rgba(0, 255, 0, 0.5); padding: 2px; border-radius: 2px; display: inline; }
        .settings-popup input[type="text"] { margin-bottom: 5px; font-size: 0.7em; }
        .close-button { top: 3px; right: 3px; background: #f00; color: #fff; padding: 3px 6px; cursor: pointer; font-size: 0.7em; }
        .close-button:hover { background: #c00; }
        @media (min-width: 768px) { .console { max-height: 33vh; font-size: 0.9em; } }
    </style>
</head>
<body>
    <h1>Trios by webxos</h1>
    <div class="console-container">
        <div class="console" id="console1"><div class="preview" id="preview1" onclick="openFullscreenPopup(1)">Console 1 ready...</div><div class="console-output" id="output1" contenteditable="true" oninput="updatePreview(1)"></div><div class="input-area"><input type="text" id="input1" placeholder="Enter HTML/CSS/JS"><button onclick="executeCode(1)">execute</button><button onclick="openFilePopup(1)">inject</button><button onclick="ejectConsole(1)">eject</button><button onclick="openSettings(1)">settings</button><button onclick="openFullscreenPopup(1)">popup</button></div><div class="popup" id="popup1"><button class="close-button" onclick="closePopup(1)">X</button><input type="file" id="file1" accept=".html,.css,.js,.txt"><button onclick="uploadFile(1)">Upload</button><button onclick="closePopup(1)">Cancel</button></div><div class="popup settings-popup" id="settings1"><button class="close-button" onclick="closeSettings(1)">X</button><input type="text" id="note1" maxlength="10" placeholder="Note"><button onclick="saveNote(1)">Save</button><button onclick="applySettings(1)">Apply</button><button onclick="closeSettings(1)">Cancel</button><div id="notes1" style="display:none;"></div></div></div>
        <div class="console" id="console2"><div class="preview" id="preview2" onclick="openFullscreenPopup(2)">Console 2 ready...</div><div class="console-output" id="output2" contenteditable="true" oninput="updatePreview(2)"></div><div class="input-area"><input type="text" id="input2" placeholder="Enter HTML/CSS/JS"><button onclick="executeCode(2)">execute</button><button onclick="openFilePopup(2)">inject</button><button onclick="ejectConsole(2)">eject</button><button onclick="openSettings(2)">settings</button><button onclick="openFullscreenPopup(2)">popup</button></div><div class="popup" id="popup2"><button class="close-button" onclick="closePopup(2)">X</button><input type="file" id="file2" accept=".html,.css,.js,.txt"><button onclick="uploadFile(2)">Upload</button><button onclick="closePopup(2)">Cancel</button></div><div class="popup settings-popup" id="settings2"><button class="close-button" onclick="closeSettings(2)">X</button><input type="text" id="note2" maxlength="10" placeholder="Note"><button onclick="saveNote(2)">Save</button><button onclick="applySettings(2)">Apply</button><button onclick="closeSettings(2)">Cancel</button><div id="notes2" style="display:none;"></div></div></div>
        <div class="console" id="console3"><div class="preview" id="preview3" onclick="openFullscreenPopup(3)">Console 3 ready...</div><div class="console-output" id="output3" contenteditable="true" oninput="updatePreview(3)"></div><div class="input-area"><input type="text" id="input3" placeholder="Enter HTML/CSS/JS"><button onclick="executeCode(3)">execute</button><button onclick="openFilePopup(3)">inject</button><button onclick="ejectConsole(3)">eject</button><button onclick="openSettings(3)">settings</button><button onclick="openFullscreenPopup(3)">popup</button></div><div class="popup" id="popup3"><button class="close-button" onclick="closePopup(3)">X</button><input type="file" id="file3" accept=".html,.css,.js,.txt"><button onclick="uploadFile(3)">Upload</button><button onclick="closePopup(3)">Cancel</button></div><div class="popup settings-popup" id="settings3"><button class="close-button" onclick="closeSettings(3)">X</button><input type="text" id="note3" maxlength="10" placeholder="Note"><button onclick="saveNote(3)">Save</button><button onclick="applySettings(3)">Apply</button><button onclick="closeSettings(3)">Cancel</button><div id="notes3" style="display:none;"></div></div></div>
    </div>
    <div class="fullscreen-popup" id="fullscreenPopup1"><button class="close-button" onclick="closeFullscreenPopup(1)">X</button><button onclick="copyFullscreenContent(1)">Copy</button><button onclick="troubleshootCode(1)">Troubleshoot</button><button class="highlighter-tool" onclick="toggleHighlighter(1)">Highlighter</button><div class="fullscreen-console"><div class="console-output" id="fullscreenOutput1" contenteditable="true" oninput="updateFullscreenPreview(1)" onmousedown="startHighlight(1)" onmousemove="highlightSelection(1)" onmouseup="endHighlight(1)"></div><div class="input-area"><input type="text" id="fullscreenInput1" placeholder="Enter HTML/CSS/JS"><button onclick="executeFullscreenCode(1)">execute</button><button onclick="openFullscreenFilePopup(1)">inject</button><button onclick="ejectFullscreenConsole(1)">eject</button></div><div class="popup" id="fullscreenFilePopup1"><button class="close-button" onclick="closeFullscreenFilePopup(1)">X</button><input type="file" id="fullscreenFile1" accept=".html,.css,.js,.txt"><button onclick="uploadFullscreenFile(1)">Upload</button><button onclick="closeFullscreenFilePopup(1)">Cancel</button></div></div></div>
    <div class="fullscreen-popup" id="fullscreenPopup2"><button class="close-button" onclick="closeFullscreenPopup(2)">X</button><button onclick="copyFullscreenContent(2)">Copy</button><button onclick="troubleshootCode(2)">Troubleshoot</button><button class="highlighter-tool" onclick="toggleHighlighter(2)">Highlighter</button><div class="fullscreen-console"><div class="console-output" id="fullscreenOutput2" contenteditable="true" oninput="updateFullscreenPreview(2)" onmousedown="startHighlight(2)" onmousemove="highlightSelection(2)" onmouseup="endHighlight(2)"></div><div class="input-area"><input type="text" id="fullscreenInput2" placeholder="Enter HTML/CSS/JS"><button onclick="executeFullscreenCode(2)">execute</button><button onclick="openFullscreenFilePopup(2)">inject</button><button onclick="ejectFullscreenConsole(2)">eject</button></div><div class="popup" id="fullscreenFilePopup2"><button class="close-button" onclick="closeFullscreenFilePopup(2)">X</button><input type="file" id="fullscreenFile2" accept=".html,.css,.js,.txt"><button onclick="uploadFullscreenFile(2)">Upload</button><button onclick="closeFullscreenFilePopup(2)">Cancel</button></div></div></div>
    <div class="fullscreen-popup" id="fullscreenPopup3"><button class="close-button" onclick="closeFullscreenPopup(3)">X</button><button onclick="copyFullscreenContent(3)">Copy</button><button onclick="troubleshootCode(3)">Troubleshoot</button><button class="highlighter-tool" onclick="toggleHighlighter(3)">Highlighter</button><div class="fullscreen-console"><div class="console-output" id="fullscreenOutput3" contenteditable="true" oninput="updateFullscreenPreview(3)" onmousedown="startHighlight(3)" onmousemove="highlightSelection(3)" onmouseup="endHighlight(3)"></div><div class="input-area"><input type="text" id="fullscreenInput3" placeholder="Enter HTML/CSS/JS"><button onclick="executeFullscreenCode(3)">execute</button><button onclick="openFullscreenFilePopup(3)">inject</button><button onclick="ejectFullscreenConsole(3)">eject</button></div><div class="popup" id="fullscreenFilePopup3"><button class="close-button" onclick="closeFullscreenFilePopup(3)">X</button><input type="file" id="fullscreenFile3" accept=".html,.css,.js,.txt"><button onclick="uploadFullscreenFile(3)">Upload</button><button onclick="closeFullscreenFilePopup(3)">Cancel</button></div></div></div>
    <script>
        let consoleStates = {1: {locked: false, content: '', notes: [], highlighter: false}, 2: {locked: false, content: '', notes: [], highlighter: false}, 3: {locked: false, content: '', notes: [], highlighter: false}};
        function updatePreview(consoleId) { document.getElementById(`preview${consoleId}`).innerHTML = document.getElementById(`output${consoleId}`).innerHTML || `Console ${consoleId} ready...`; }
        function updateFullscreenPreview(consoleId) { document.getElementById(`output${consoleId}`).innerHTML = document.getElementById(`fullscreenOutput${consoleId}`).innerHTML; updatePreview(consoleId); }
        function executeCode(consoleId) { if (!consoleStates[consoleId].locked) try { eval(document.getElementById(`input${consoleId}`).value); } catch(e) { logError(consoleId, e.message); } }
        function openFilePopup(consoleId) { if (!consoleStates[consoleId].locked) document.getElementById(`popup${consoleId}`).style.display = 'block'; }
        function closePopup(consoleId) { document.getElementById(`popup${consoleId}`).style.display = 'none'; }
        function uploadFile(consoleId) { /* Simplified file handling */ }
        function ejectConsole(consoleId) { if (!consoleStates[consoleId].locked) document.getElementById(`output${consoleId}`).innerHTML = ''; }
        function openSettings(consoleId) { document.getElementById(`settings${consoleId}`).style.display = 'block'; }
        function closeSettings(consoleId) { document.getElementById(`settings${consoleId}`).style.display = 'none'; }
        function applySettings(consoleId) { closeSettings(consoleId); }
        function saveNote(consoleId) { const note = document.getElementById(`note${consoleId}`).value; if (note.length <= 10) { consoleStates[consoleId].notes.push(note); document.getElementById(`notes${consoleId}`).innerHTML = consoleStates[consoleId].notes.join('<br>'); document.getElementById(`notes${consoleId}`).style.display = 'block'; document.getElementById(`note${consoleId}`).value = ''; } }
        function openFullscreenPopup(consoleId) { document.getElementById(`fullscreenPopup${consoleId}`).style.display = 'block'; }
        function closeFullscreenPopup(consoleId) { document.getElementById(`fullscreenPopup${consoleId}`).style.display = 'none'; }
        function executeFullscreenCode(consoleId) { if (!consoleStates[consoleId].locked) try { eval(document.getElementById(`fullscreenInput${consoleId}`).value); } catch(e) { logError(consoleId, e.message); } }
        function openFullscreenFilePopup(consoleId) { if (!consoleStates[consoleId].locked) document.getElementById(`fullscreenFilePopup${consoleId}`).style.display = 'block'; }
        function closeFullscreenFilePopup(consoleId) { document.getElementById(`fullscreenFilePopup${consoleId}`).style.display = 'none'; }
        function uploadFullscreenFile(consoleId) { /* Simplified file handling */ }
        function copyFullscreenContent(consoleId) { navigator.clipboard.writeText(document.getElementById(`fullscreenOutput${consoleId}`).textContent); }
        function toggleHighlighter(consoleId) { consoleStates[consoleId].highlighter = !consoleStates[consoleId].highlighter; document.getElementById(`fullscreenOutput${consoleId}`).style.cursor = consoleStates[consoleId].highlighter ? 'crosshair' : 'text'; }
        let isHighlighting = {1: false, 2: false, 3: false};
        function startHighlight(consoleId) { if (consoleStates[consoleId].highlighter) { const selection = window.getSelection(); if (selection.rangeCount > 0) { isHighlighting[consoleId] = true; } } }
        function highlightSelection(consoleId) { if (isHighlighting[consoleId] && consoleStates[consoleId].highlighter) { const selection = window.getSelection(); if (selection.rangeCount > 0 && !selection.isCollapsed) { const range = selection.getRangeAt(0); const span = document.createElement('span'); span.className = 'highlight'; range.surroundContents(span); updateFullscreenPreview(consoleId); selection.removeAllRanges(); } } }
        function endHighlight(consoleId) { isHighlighting[consoleId] = false; }
        function troubleshootCode(consoleId) { const content = document.getElementById(`fullscreenOutput${consoleId}`).textContent; if (content.includes('Error')) logError(consoleId, 'Syntax error detected'); }
        function logError(consoleId, message) { document.getElementById(`output${consoleId}`).textContent += `\nError: ${message}`; }
        document.querySelectorAll('input[type="text"]').forEach(input => input.addEventListener('keydown', e => e.key === 'Enter' && executeCode(e.target.id.replace('input', ''))));
        window.onload = () => console.log('Trios initialized at 12:43 AM EDT, July 21, 2025');
    </script>
</body>
</html>
